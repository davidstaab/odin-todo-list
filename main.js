(()=>{var t={98:t=>{const e={validateEmail:function(t){return/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(t)},validatePassword:function(t){return/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*()_+])[a-zA-Z0-9!@#$%^&*()_+]{8,}$/.test(t)},validateURL:function(t){return/^(https?:\/\/)?([a-z0-9-]+\.)+[a-z]{2,6}(\/.*)?$/i.test(t)},validatePhoneNumber:function(t){return/^\+?\d{1,3}[-.\s]?\(?\d{1,3}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,4}$/.test(t)},sanitizeInput:function(t){return t.replace(/[<>"'&/]/g,(t=>({"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","&":"&amp;","/":"&#x2F;"}[t])))},escapeHTML:function(t){const e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"};return t.replace(/[&<>"'/]/g,(t=>e[t]))},encryptText:function(t,e){let n="";for(let r=0;r<t.length;r++){const a=t.charCodeAt(r)+e;n+=String.fromCharCode(a)}return n},decryptText:function(t,e){let n="";for(let r=0;r<t.length;r++){const a=t.charCodeAt(r)-e;n+=String.fromCharCode(a)}return n},generateRandomString:function(t){let e="";for(let n=0;n<t;n++){const t=Math.floor(62*Math.random());e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(t)}return e},capitalizeString:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},reverseString:function(t){return t.split("").reverse().join("")}};t.exports=e}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}(()=>{"use strict";var t=n(98);function e(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function r(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const r=e(t);return!isNaN(Number(r))}function a(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}let i={};function o(){return i}const s={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function c(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const d={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;r=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;r=t.values[a]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function h(t){return(e,n={})=>{const r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;const o=i[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(o))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(o))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(o.length)}}}var m;const f={code:"en-US",formatDistance:(t,e,n)=>{let r;const a=s[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:d,formatRelative:(t,e,n,r)=>u[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(m={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(m.matchPattern);if(!n)return null;const r=n[0],a=t.match(m.parsePattern);if(!a)return null;let i=m.valueCallback?m.valueCallback(a[0]):a[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:t.slice(r.length)}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}},w=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},g=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},p={p:g,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return w(t,e);let i;switch(r){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",w(r,e)).replace("{{time}}",g(a,e))}},y=/^D+$/,b=/^Y+$/,x=["D","DD","YY","YYYY"];function v(t){return y.test(t)}function k(t){return b.test(t)}function C(t,e,n){const r=function(t,e,n){const r="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(r),x.includes(t))throw new RangeError(r)}class M{subPriority=0;validate(t,e){return!0}}class T extends M{constructor(t,e,n,r,a){super(),this.value=t,this.validateValue=e,this.setValue=n,this.priority=r,a&&(this.subPriority=a)}validate(t,e){return this.validateValue(t,this.value,e)}set(t,e,n){return this.setValue(t,e,this.value,n)}}class E extends M{priority=10;subPriority=-1;set(t,e){return e.timestampIsSet?t:a(t,function(t,e){const n=e instanceof Date?a(e,0):new e(0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n.setHours(t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()),n}(t,Date))}}class D{run(t,e,n,r){const a=this.parse(t,e,n,r);return a?{setter:new T(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}validate(t,e,n){return!0}}Math.pow(10,8);const S=6048e5,N=864e5,P=/^(1[0-2]|0?\d)/,L=/^(3[0-1]|[0-2]?\d)/,q=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,Y=/^(5[0-3]|[0-4]?\d)/,H=/^(2[0-3]|[0-1]?\d)/,O=/^(2[0-4]|[0-1]?\d)/,W=/^(1[0-1]|0?\d)/,A=/^(1[0-2]|0?\d)/,I=/^[0-5]?\d/,F=/^[0-5]?\d/,Q=/^\d/,B=/^\d{1,2}/,z=/^\d{1,3}/,$=/^\d{1,4}/,j=/^-?\d+/,G=/^-?\d/,X=/^-?\d{1,2}/,R=/^-?\d{1,3}/,J=/^-?\d{1,4}/,Z=/^([+-])(\d{2})(\d{2})?|Z/,K=/^([+-])(\d{2})(\d{2})|Z/,V=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,U=/^([+-])(\d{2}):(\d{2})|Z/,_=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function tt(t,e){return t?{value:e(t.value),rest:t.rest}:t}function et(t,e){const n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function nt(t,e){const n=e.match(t);return n?"Z"===n[0]?{value:0,rest:e.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:e.slice(n[0].length)}:null}function rt(t){return et(j,t)}function at(t,e){switch(t){case 1:return et(Q,e);case 2:return et(B,e);case 3:return et(z,e);case 4:return et($,e);default:return et(new RegExp("^\\d{1,"+t+"}"),e)}}function it(t,e){switch(t){case 1:return et(G,e);case 2:return et(X,e);case 3:return et(R,e);case 4:return et(J,e);default:return et(new RegExp("^-?\\d{1,"+t+"}"),e)}}function ot(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function st(t,e){const n=e>0,r=n?e:1-e;let a;if(r<=50)a=t||100;else{const e=r+50;a=t+100*Math.trunc(e/100)-(t>=e%100?100:0)}return n?a:1-a}function ct(t){return t%400==0||t%4==0&&t%100!=0}function dt(t,n){const r=o(),a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,i=e(t),s=i.getDay(),c=(s<a?7:0)+s-a;return i.setDate(i.getDate()-c),i.setHours(0,0,0,0),i}function ut(t,n){const r=e(t),i=r.getFullYear(),s=o(),c=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??s.firstWeekContainsDate??s.locale?.options?.firstWeekContainsDate??1,d=a(t,0);d.setFullYear(i+1,0,c),d.setHours(0,0,0,0);const u=dt(d,n),l=a(t,0);l.setFullYear(i,0,c),l.setHours(0,0,0,0);const h=dt(l,n);return r.getTime()>=u.getTime()?i+1:r.getTime()>=h.getTime()?i:i-1}function lt(t){return dt(t,{weekStartsOn:1})}function ht(t,n){const r=e(t),i=+dt(r,n)-+function(t,e){const n=o(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,i=ut(t,e),s=a(t,0);return s.setFullYear(i,0,r),s.setHours(0,0,0,0),dt(s,e)}(r,n);return Math.round(i/S)+1}function mt(t){const n=e(t),r=n.getFullYear(),i=a(t,0);i.setFullYear(r+1,0,4),i.setHours(0,0,0,0);const o=lt(i),s=a(t,0);s.setFullYear(r,0,4),s.setHours(0,0,0,0);const c=lt(s);return n.getTime()>=o.getTime()?r+1:n.getTime()>=c.getTime()?r:r-1}function ft(t){const n=e(t),r=+lt(n)-+function(t){const e=mt(t),n=a(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),lt(n)}(n);return Math.round(r/S)+1}const wt=[31,28,31,30,31,30,31,31,30,31,30,31],gt=[31,29,31,30,31,30,31,31,30,31,30,31];function pt(t,n){const r=e(t);return isNaN(n)?a(t,NaN):n?(r.setDate(r.getDate()+n),r):r}function yt(t,n,r){const a=o(),i=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=e(t),c=s.getDay(),d=7-i;return pt(s,n<0||n>6?n-(c+d)%7:((n%7+7)%7+d)%7-(c+d)%7)}function bt(t,n){const r=e(t);return pt(r,n-function(t){let n=e(t).getDay();return 0===n&&(n=7),n}(r))}function xt(t){const n=e(t),r=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return r.setUTCFullYear(n.getFullYear()),+t-+r}const vt={G:new class extends D{priority=140;parse(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}set(t,e,n){return e.era=n,t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["R","u","t","T"]},y:new class extends D{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"yy"===e});switch(e){case"y":return tt(at(4,t),r);case"yo":return tt(n.ordinalNumber(t,{unit:"year"}),r);default:return tt(at(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n){const r=t.getFullYear();if(n.isTwoDigitYear){const e=st(n.year,r);return t.setFullYear(e,0,1),t.setHours(0,0,0,0),t}const a="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(a,0,1),t.setHours(0,0,0,0),t}},Y:new class extends D{priority=130;parse(t,e,n){const r=t=>({year:t,isTwoDigitYear:"YY"===e});switch(e){case"Y":return tt(at(4,t),r);case"Yo":return tt(n.ordinalNumber(t,{unit:"year"}),r);default:return tt(at(e.length,t),r)}}validate(t,e){return e.isTwoDigitYear||e.year>0}set(t,e,n,r){const a=ut(t,r);if(n.isTwoDigitYear){const e=st(n.year,a);return t.setFullYear(e,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),dt(t,r)}const i="era"in e&&1!==e.era?1-n.year:n.year;return t.setFullYear(i,0,r.firstWeekContainsDate),t.setHours(0,0,0,0),dt(t,r)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:new class extends D{priority=130;parse(t,e){return it("R"===e?4:e.length,t)}set(t,e,n){const r=a(t,0);return r.setFullYear(n,0,4),r.setHours(0,0,0,0),lt(r)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:new class extends D{priority=130;parse(t,e){return it("u"===e?4:e.length,t)}set(t,e,n){return t.setFullYear(n,0,1),t.setHours(0,0,0,0),t}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]},Q:new class extends D{priority=120;parse(t,e,n){switch(e){case"Q":case"QQ":return at(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:new class extends D{priority=120;parse(t,e,n){switch(e){case"q":case"qq":return at(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=1&&e<=4}set(t,e,n){return t.setMonth(3*(n-1),1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:new class extends D{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"M":return tt(et(P,t),r);case"MM":return tt(at(2,t),r);case"Mo":return tt(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}},L:new class extends D{priority=110;parse(t,e,n){const r=t=>t-1;switch(e){case"L":return tt(et(P,t),r);case"LL":return tt(at(2,t),r);case"Lo":return tt(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.setMonth(n,1),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:new class extends D{priority=100;parse(t,e,n){switch(e){case"w":return et(Y,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return at(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,n,r,a){return dt(function(t,n,r){const a=e(t),i=ht(a,r)-n;return a.setDate(a.getDate()-7*i),a}(t,r,a),a)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:new class extends D{priority=100;parse(t,e,n){switch(e){case"I":return et(Y,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return at(e.length,t)}}validate(t,e){return e>=1&&e<=53}set(t,n,r){return lt(function(t,n){const r=e(t),a=ft(r)-n;return r.setDate(r.getDate()-7*a),r}(t,r))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:new class extends D{priority=90;subPriority=1;parse(t,e,n){switch(e){case"d":return et(L,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return at(e.length,t)}}validate(t,e){const n=ct(t.getFullYear()),r=t.getMonth();return n?e>=1&&e<=gt[r]:e>=1&&e<=wt[r]}set(t,e,n){return t.setDate(n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:new class extends D{priority=90;subpriority=1;parse(t,e,n){switch(e){case"D":case"DD":return et(q,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return at(e.length,t)}}validate(t,e){return ct(t.getFullYear())?e>=1&&e<=366:e>=1&&e<=365}set(t,e,n){return t.setMonth(0,n),t.setHours(0,0,0,0),t}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:new class extends D{priority=90;parse(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=yt(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["D","i","e","c","t","T"]},e:new class extends D{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return tt(at(e.length,t),a);case"eo":return tt(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=yt(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:new class extends D{priority=90;parse(t,e,n,r){const a=t=>{const e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return tt(at(e.length,t),a);case"co":return tt(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}validate(t,e){return e>=0&&e<=6}set(t,e,n,r){return(t=yt(t,n,r)).setHours(0,0,0,0),t}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:new class extends D{priority=90;parse(t,e,n){const r=t=>0===t?7:t;switch(e){case"i":case"ii":return at(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return tt(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return tt(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return tt(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return tt(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}validate(t,e){return e>=1&&e<=7}set(t,e,n){return(t=bt(t,n)).setHours(0,0,0,0),t}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:new class extends D{priority=80;parse(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(ot(n),0,0,0),t}incompatibleTokens=["b","B","H","k","t","T"]},b:new class extends D{priority=80;parse(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(ot(n),0,0,0),t}incompatibleTokens=["a","B","H","k","t","T"]},B:new class extends D{priority=80;parse(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}set(t,e,n){return t.setHours(ot(n),0,0,0),t}incompatibleTokens=["a","b","t","T"]},h:new class extends D{priority=70;parse(t,e,n){switch(e){case"h":return et(A,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return at(e.length,t)}}validate(t,e){return e>=1&&e<=12}set(t,e,n){const r=t.getHours()>=12;return r&&n<12?t.setHours(n+12,0,0,0):r||12!==n?t.setHours(n,0,0,0):t.setHours(0,0,0,0),t}incompatibleTokens=["H","K","k","t","T"]},H:new class extends D{priority=70;parse(t,e,n){switch(e){case"H":return et(H,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return at(e.length,t)}}validate(t,e){return e>=0&&e<=23}set(t,e,n){return t.setHours(n,0,0,0),t}incompatibleTokens=["a","b","h","K","k","t","T"]},K:new class extends D{priority=70;parse(t,e,n){switch(e){case"K":return et(W,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return at(e.length,t)}}validate(t,e){return e>=0&&e<=11}set(t,e,n){return t.getHours()>=12&&n<12?t.setHours(n+12,0,0,0):t.setHours(n,0,0,0),t}incompatibleTokens=["h","H","k","t","T"]},k:new class extends D{priority=70;parse(t,e,n){switch(e){case"k":return et(O,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return at(e.length,t)}}validate(t,e){return e>=1&&e<=24}set(t,e,n){const r=n<=24?n%24:n;return t.setHours(r,0,0,0),t}incompatibleTokens=["a","b","h","H","K","t","T"]},m:new class extends D{priority=60;parse(t,e,n){switch(e){case"m":return et(I,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return at(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setMinutes(n,0,0),t}incompatibleTokens=["t","T"]},s:new class extends D{priority=50;parse(t,e,n){switch(e){case"s":return et(F,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return at(e.length,t)}}validate(t,e){return e>=0&&e<=59}set(t,e,n){return t.setSeconds(n,0),t}incompatibleTokens=["t","T"]},S:new class extends D{priority=30;parse(t,e){return tt(at(e.length,t),(t=>Math.trunc(t*Math.pow(10,3-e.length))))}set(t,e,n){return t.setMilliseconds(n),t}incompatibleTokens=["t","T"]},X:new class extends D{priority=10;parse(t,e){switch(e){case"X":return nt(Z,t);case"XX":return nt(K,t);case"XXXX":return nt(V,t);case"XXXXX":return nt(_,t);default:return nt(U,t)}}set(t,e,n){return e.timestampIsSet?t:a(t,t.getTime()-xt(t)-n)}incompatibleTokens=["t","T","x"]},x:new class extends D{priority=10;parse(t,e){switch(e){case"x":return nt(Z,t);case"xx":return nt(K,t);case"xxxx":return nt(V,t);case"xxxxx":return nt(_,t);default:return nt(U,t)}}set(t,e,n){return e.timestampIsSet?t:a(t,t.getTime()-xt(t)-n)}incompatibleTokens=["t","T","X"]},t:new class extends D{priority=40;parse(t){return rt(t)}set(t,e,n){return[a(t,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"},T:new class extends D{priority=20;parse(t){return rt(t)}set(t,e,n){return[a(t,n),{timestampIsSet:!0}]}incompatibleTokens="*"}},kt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ct=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Mt=/^'([^]*?)'?$/,Tt=/''/g,Et=/\S/,Dt=/[a-zA-Z]/;function St(t,n,r,i){const s=Object.assign({},o()),c=i?.locale??s.locale??f,d=i?.firstWeekContainsDate??i?.locale?.options?.firstWeekContainsDate??s.firstWeekContainsDate??s.locale?.options?.firstWeekContainsDate??1,u=i?.weekStartsOn??i?.locale?.options?.weekStartsOn??s.weekStartsOn??s.locale?.options?.weekStartsOn??0;if(""===n)return""===t?e(r):a(r,NaN);const l={firstWeekContainsDate:d,weekStartsOn:u,locale:c},h=[new E],m=n.match(Ct).map((t=>{const e=t[0];return e in p?(0,p[e])(t,c.formatLong):t})).join("").match(kt),w=[];for(let e of m){!i?.useAdditionalWeekYearTokens&&k(e)&&C(e,n,t),!i?.useAdditionalDayOfYearTokens&&v(e)&&C(e,n,t);const o=e[0],s=vt[o];if(s){const{incompatibleTokens:n}=s;if(Array.isArray(n)){const t=w.find((t=>n.includes(t.token)||t.token===o));if(t)throw new RangeError(`The format string mustn't contain \`${t.fullToken}\` and \`${e}\` at the same time`)}else if("*"===s.incompatibleTokens&&w.length>0)throw new RangeError(`The format string mustn't contain \`${e}\` and any other token at the same time`);w.push({token:o,fullToken:e});const i=s.run(t,e,c.match,l);if(!i)return a(r,NaN);h.push(i.setter),t=i.rest}else{if(o.match(Dt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");if("''"===e?e="'":"'"===o&&(e=e.match(Mt)[1].replace(Tt,"'")),0!==t.indexOf(e))return a(r,NaN);t=t.slice(e.length)}}if(t.length>0&&Et.test(t))return a(r,NaN);const g=h.map((t=>t.priority)).sort(((t,e)=>e-t)).filter(((t,e,n)=>n.indexOf(t)===e)).map((t=>h.filter((e=>e.priority===t)).sort(((t,e)=>e.subPriority-t.subPriority)))).map((t=>t[0]));let y=e(r);if(isNaN(y.getTime()))return a(r,NaN);const b={};for(const t of g){if(!t.validate(y,l))return a(r,NaN);const e=t.set(y,b,l);Array.isArray(e)?(y=e[0],Object.assign(b,e[1])):y=e}return a(r,y)}function Nt(t){const n=e(t);return n.setHours(0,0,0,0),n}function Pt(t){const n=e(t);return function(t,e){const n=Nt(t),r=Nt(e),a=+n-xt(n),i=+r-xt(r);return Math.round((a-i)/N)}(n,function(t){const n=e(t),r=a(t,0);return r.setFullYear(n.getFullYear(),0,1),r.setHours(0,0,0,0),r}(n))+1}function Lt(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const qt={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return Lt("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):Lt(n+1,2)},d:(t,e)=>Lt(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>Lt(t.getHours()%12||12,e.length),H:(t,e)=>Lt(t.getHours(),e.length),m:(t,e)=>Lt(t.getMinutes(),e.length),s:(t,e)=>Lt(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return Lt(Math.trunc(r*Math.pow(10,n-3)),e.length)}},Yt={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return qt.y(t,e)},Y:function(t,e,n,r){const a=ut(t,r),i=a>0?a:1-a;return"YY"===e?Lt(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):Lt(i,e.length)},R:function(t,e){return Lt(mt(t),e.length)},u:function(t,e){return Lt(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return Lt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return Lt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return qt.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return Lt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const a=ht(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):Lt(a,e.length)},I:function(t,e,n){const r=ft(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):Lt(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):qt.d(t,e)},D:function(t,e,n){const r=Pt(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):Lt(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Lt(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const a=t.getDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Lt(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return Lt(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return qt.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):qt.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):Lt(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):Lt(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):qt.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):qt.s(t,e)},S:function(t,e){return qt.S(t,e)},X:function(t,e,n){const r=t.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return Ot(r);case"XXXX":case"XX":return Wt(r);default:return Wt(r,":")}},x:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"x":return Ot(r);case"xxxx":case"xx":return Wt(r);default:return Wt(r,":")}},O:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Ht(r,":");default:return"GMT"+Wt(r,":")}},z:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Ht(r,":");default:return"GMT"+Wt(r,":")}},t:function(t,e,n){return Lt(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return Lt(t.getTime(),e.length)}};function Ht(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),a=Math.trunc(r/60),i=r%60;return 0===i?n+String(a):n+String(a)+e+Lt(i,2)}function Ot(t,e){return t%60==0?(t>0?"-":"+")+Lt(Math.abs(t)/60,2):Wt(t,e)}function Wt(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+Lt(Math.trunc(r/60),2)+e+Lt(r%60,2)}const At=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,It=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ft=/^'([^]*?)'?$/,Qt=/''/g,Bt=/[a-zA-Z]/;function zt(t,n,a){const i=o(),s=a?.locale??i.locale??f,c=a?.firstWeekContainsDate??a?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,d=a?.weekStartsOn??a?.locale?.options?.weekStartsOn??i.weekStartsOn??i.locale?.options?.weekStartsOn??0,u=e(t);if(!r(u))throw new RangeError("Invalid time value");let l=n.match(It).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,p[e])(t,s.formatLong):t})).join("").match(At).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:$t(t)};if(Yt[e])return{isToken:!0,value:t};if(e.match(Bt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));s.localize.preprocessor&&(l=s.localize.preprocessor(u,l));const h={firstWeekContainsDate:c,weekStartsOn:d,locale:s};return l.map((e=>{if(!e.isToken)return e.value;const r=e.value;return(!a?.useAdditionalWeekYearTokens&&k(r)||!a?.useAdditionalDayOfYearTokens&&v(r))&&C(r,n,String(t)),(0,Yt[r[0]])(u,r,s.localize,h)})).join("")}function $t(t){const e=t.match(Ft);return e?e[1].replace(Qt,"'"):t}const jt="Default";class Gt{static normal=Object.freeze(new Gt(0));static high=Object.freeze(new Gt(1));static highest=Object.freeze(new Gt(2));#t;static compareAsc(t,e){return t.#t-e.#t}constructor(t){this.#t=t}get asString(){let t=Object.keys(Gt);for(const e of t)if(Gt[e]===this)return e;return null}get asNumber(){return this.#t}}class Xt{#e="";#n=Gt.normal;#r="";#a="";#i=null;static areSame(t,e){if(!(t instanceof Xt&&e instanceof Xt))throw new Error("Both parameters must be instances of this class.");return t.#e===e.#e&&t.#a===e.#a&&t.#n===e.#n&&t.#r===e.#r}static parse(t,e){const n=JSON.parse(e);let r;switch(n.priority){case"normal":r=Gt.normal;break;case"high":r=Gt.high;break;case"highest":r=Gt.highest}let a=new Xt(n.title,r,n.deadline,n.note);return a.changedCb=t.changed,a}constructor(t,e,n,r=""){return this.title=t,this.priority=e,this.deadline=n,this.note=r,this}set changedCb(t){this.#i=t}set title(e){this.#e=e?t.sanitizeInput(e):"",this.#i&&this.#i()}get title(){return this.#e}set note(e){this.#a=e?t.sanitizeInput(e):"",this.#i&&this.#i()}get note(){return this.#a}set priority(t){if(!(t instanceof Gt))throw new TypeError(`${t} is not a PriorityEnum.`);this.#n=t,this.#i&&this.#i()}get priority(){return this.#n}set deadline(t){if(!r(St(t,"yyyy-MM-dd",new Date,e)))throw new Error(`Invalid date string: ${t.toString()}`);var e;this.#r=t,this.#i&&this.#i()}get deadline(){return this.#r}formatDeadline(t="MM/dd/yy"){return zt(this.#r,t)}stringify(){return JSON.stringify({title:this.#e,priority:this.#n.asString,deadline:this.#r,note:this.#a})}}class Rt{#o=[];name="";#i=null;static parse(t,e){const n=JSON.parse(e);let r=[];for(let e of n.items)r.push(Xt.parse(t,e));let a=new Rt(n.name,r);return a.changedCb=t.changed,a}constructor(t,e=[]){if("string"!=typeof t)throw new Error("Name must be a string.");if(""===t)throw new Error("Name cannot be empty.");if(!Array.isArray(e))throw new Error("Argument is not an array of todo items.");return this.name=t,this.#o=e,this}set changedCb(t){this.#i=t}add(t){return this.#o.push(t),this.#i&&this.#i(),this}remove(t){let e;if(t instanceof Rt){if(e=function(t){let e=-1;for(let n=0;n<this.#o.length;n++)if(Xt.areSame(t,this.#o[n])){e=n;break}return e}.call(this,t),e<0)throw new Error(`${t} was not found in list.`)}else e=t;return this.#o.splice(e,1),this.#i&&this.#i(),this}get items(){return this.#o}sortTitleAsc(){return this.#o.sort(((t,e)=>t.title.localeCompare(e.title))),this}sortDeadlineAsc(){return this.#o.sort(((t,n)=>function(t,n){const r=e(t),a=e(n),i=r.getTime()-a.getTime();return i<0?-1:i>0?1:i}(t.deadline,n.deadline))),this}sortPriorityAsc(){return this.#o.sort(((t,e)=>Gt.compareAsc(t.priority,e.priority))),this}sortPriorityDesc(){return this.#o.sort(((t,e)=>-1*Gt.compareAsc(t.priority,e.priority))),this}stringify(){let t=[];for(let e of this.#o){let n=e.stringify();t.push(n)}return JSON.stringify({name:this.name,items:t})}}class Jt{#s=[];#i=null;static parse(t,e){const n=JSON.parse(e);let r=[];for(let e of n.lists)r.push(Rt.parse(t,e));let a=new Jt(r);return a.changedCb=t.changed,a}constructor(t=[]){if(!Array.isArray(t))throw new Error("Argument is not an array of todo lists.");return this.#s=t,this}set changedCb(t){this.#i=t}get lists(){return this.#s}getListByName(t){let e=this.#s.findIndex((e=>e.name===t));return e<0?null:this.#s[e]}getListByIndex(t){return this.#s[t]}add(t){if(this.#s.findIndex((e=>e.name===t.name))>=0)throw new Error(`A list named ${t.name} already exists.`);return this.#s.push(t),this.#i&&this.#i(),this}remove(t){let e;if("string"==typeof t){if(e=this.#s.findIndex((e=>e.name===t)),e<0)throw new Error(`'${t}' was not found in list of lists.`)}else e=t;return this.#s.splice(e,1),this.#i&&this.#i(),this}sortAsc(t=!0){if(this.#s.sort(((t,e)=>t.title.localeCompare(e.title))),t)for(let t=0;t<this.#s.length;t++)if(this.#s[t].name===jt){this.#s.copyWithin(0,t,t);break}return this}get lists(){return this.#s}stringify(){let t=[];for(let e of this.#s){let n=e.stringify();t.push(n)}return JSON.stringify({lists:t})}}function Zt(t){const e=document.createElement("span");return e.classList.add("iconify"),e.dataset.icon=t,e}class Kt{title="";priority=new Gt;deadline="";note="";constructor(t,e,n,r){switch(this.title=t,e){case 0:this.priority=Gt.normal;break;case 1:this.priority=Gt.high;break;case 2:this.priority=Gt.highest;break;default:throw new RangeError(`${this.priority} cannot be mapped to the enumeration.`)}this.deadline=this.#c(n),this.note=r}#c(t){const e=/^(\d{4}-\d{2}-\d{2})/;if(!e.test(t))throw new Error(`"${t}" does not contain a YYYY-MM-dd substring.`);return t.match(e)[0]}set deadline(t){this.deadline=this.#c(t)}get deadlineDisplay(){return zt(this.deadline,"MM/dd/yyyy")}}class Vt{static normal={style:{color:"white",backgroundColor:"rgb(155, 122, 79)"},dataIcon:"mdi-clock-outline"};static high={style:{color:"white",backgroundColor:"orange"},dataIcon:"mdi-triangle-outline"};static highest={style:{color:"white",backgroundColor:"red"},dataIcon:"mdi-alert-circle-outline"};static applyStyle(t,e){switch(e){case Gt.normal:t.style.color=Vt.normal.style.color,t.style.backgroundColor=Vt.normal.style.backgroundColor;break;case Gt.high:t.style.color=Vt.high.style.color,t.style.backgroundColor=Vt.high.style.backgroundColor;break;case Gt.highest:t.style.color=Vt.highest.style.color,t.style.backgroundColor=Vt.highest.style.backgroundColor}}}const Ut=[{text:"Normal",value:0,default:!0},{text:"High",value:1},{text:"Highest",value:2}],_t="mdi-close";function te(t,e,n,r){const a=document.querySelector(`.${t}-area .menu`),i=document.createElement("button");i.type="button",i.classList.add(`${e}-btn`),i.addEventListener("click",r),i.appendChild(Zt(n)),a.appendChild(i)}function ee(t){let e=document.getElementById("new-item-dialog");e||(e=function(e){const n=document.createElement("dialog");n.id="new-item-dialog";const r=document.createElement("h3");r.classList.add("dialog-heading"),r.textContent="Create New Item",n.appendChild(r);const a=document.createElement("form");n.appendChild(a);const i=document.createElement("label");i.textContent="Title",i.htmlFor="new-item-title";const o=document.createElement("input");o.type="text",o.name="title",o.id="new-item-title";const s=document.createElement("div");s.appendChild(i),s.appendChild(o),a.appendChild(s);const c=document.createElement("fieldset"),d=document.createElement("legend");d.textContent="Priority",c.appendChild(d),a.appendChild(c);for(let t of Ut){const e=document.createElement("input");e.type="radio",e.name="priority",e.id=`new-item-priority-${t.text}`,e.value=String(t.value),c.appendChild(e);const n=document.createElement("label");n.htmlFor=`new-item-priority-${t.text}`,n.textContent=t.text,c.appendChild(n)}const u=document.createElement("label");u.htmlFor="new-item-deadline",u.textContent="Deadline";const l=document.createElement("input");l.type="date",l.id="new-item-deadline",l.name="deadline";const h=document.createElement("div");h.appendChild(u),h.appendChild(l),a.appendChild(h);const m=document.createElement("label");m.htmlFor="new-item-note",m.textContent="Note";const f=document.createElement("textarea");f.id="new-item-note",f.name="note";const w=document.createElement("div");w.appendChild(m),w.appendChild(f),a.appendChild(w);const g=document.createElement("div");g.classList.add("buttons"),a.appendChild(g);const p=document.createElement("button");p.type="submit";const y=Zt("mdi-checkbox-multiple-outline");p.appendChild(y),g.appendChild(p),a.addEventListener("submit",(function(e){e.preventDefault&&e.preventDefault();const n=e.submitter.closest("dialog"),r=e.submitter.closest("form");n.close();let a=new FormData(r);r.reset(),t.itemCreated(new Kt(a.get("title"),Number(a.get("priority")),a.get("deadline"),a.get("note")))}));const b=document.createElement("button");b.type="button";const x=Zt("mdi-cancel");return b.appendChild(x),b.addEventListener("click",(()=>n.close())),g.appendChild(b),document.body.appendChild(n),n}()),document.getElementById("new-item-priority-Normal").checked=!0,document.getElementById("new-item-deadline").value=zt(new Date,"yyyy-MM-dd"),e.showModal()}function ne(t){let e=document.getElementById("new-list-dialog");e||(e=function(e){const n=document.createElement("dialog");n.id="new-list-dialog";const r=document.createElement("h3");r.classList.add("dialog-heading"),r.textContent="Create New List",n.appendChild(r);const a=document.createElement("form");n.appendChild(a);const i=document.createElement("label");i.textContent="Title",i.htmlFor="new-list-title";const o=document.createElement("input");o.type="text",o.name="title",o.id="new-list-title";const s=document.createElement("div");s.appendChild(i),s.appendChild(o),a.appendChild(s);const c=document.createElement("div");c.classList.add("buttons"),a.appendChild(c);const d=document.createElement("button");d.type="submit";const u=Zt("mdi-playlist-check");d.appendChild(u),c.appendChild(d),a.addEventListener("submit",(function(e){e.preventDefault&&e.preventDefault();const n=e.submitter.closest("dialog"),r=e.submitter.closest("form");n.close();let a=new FormData(r);r.reset(),t.listCreated(a.get("title"))}));const l=document.createElement("button");l.type="button";const h=Zt("mdi-cancel");return l.appendChild(h),l.addEventListener("click",(()=>n.close())),c.appendChild(l),document.body.appendChild(n),n}()),e.showModal()}function re(t,e){const n=document.querySelectorAll(".list-card");for(let t of n)t.dataset.name===e?t.classList.add("selected"):t.classList.remove("selected");t.selected(e)}function ae(){const t=document.querySelectorAll(".list-card");for(let e of t)if(e.classList.contains("selected"))return e.dataset.name}function ie(t,e,n){document.querySelector(".items-list").appendChild(function(t,e,n){const r=document.createElement("div");r.classList.add("item-card"),r.dataset.hash=t;const a=document.createElement("h2");a.classList.add("title");const i=Zt(Vt[e.priority.asString].dataIcon);i.classList.add("priority"),Vt.applyStyle(i,e.priority),a.textContent=e.title,a.prepend(i),r.appendChild(a);const o=document.createElement("p");o.classList.add("due");const s=document.createTextNode("Due on "),c=document.createElement("span");c.classList.add("date"),c.textContent=e.deadlineDisplay,o.appendChild(s),o.appendChild(c),r.appendChild(o);const d=document.createElement("p");d.classList.add("description"),d.textContent=e.note,r.appendChild(d);const u=document.createElement("div"),l=document.createElement("button");l.type="button";const h=Zt(_t);return l.appendChild(h),l.addEventListener("click",n.remove),u.appendChild(l),r.appendChild(u),r}(t,e,{remove:t=>{const e=Number(t.target.closest(".item-card").dataset.hash);n.remove(e)}}))}function oe(t){const e=new Rt(t);return e.changedCb=le,e}const se=re.bind(null,{selected:ue}),ce=function(t,e,{deleteBtn:n=!0}={}){const r=document.querySelector(".lists-list"),a=document.createElement("div");a.classList.add("list-card"),a.dataset.name=e;const i=document.createElement("h2");if(i.textContent=e,a.appendChild(i),n){const n=document.createElement("button");n.type="button";const r=Zt("mdi-close");n.appendChild(r),n.addEventListener("click",(n=>{n.stopPropagation(),function(t,e){const n=document.querySelectorAll(".list-card");let r=-1;for(let t=0;t<n.length;t++)if(n[t].dataset.name===e){r=t;break}if(r<0)throw new Error(`List name ${e} was not found.`);const a=function(t){const e=document.querySelectorAll(".list-card");for(let n of e)if(n.dataset.name===t)return n.classList.contains("selected");return!1}(e);n[r].remove(),t.removed(e,a)}({removed:t.removed},e)})),a.appendChild(n)}a.addEventListener("click",(n=>{n.target.closest(".list-card").classList.contains("selected")||re({selected:t.selected},e)})),r.appendChild(a)}.bind(null,{selected:ue,removed:function(t,e){fe.remove(t),me.flush(),e&&se(jt)}});function de(t){!function(t){const e=me.findIdx(t);var n;fe.getListByName(ae()).remove(e),n=e,Array.from(document.querySelectorAll(".item-card"))[n].remove(),me.unregister(t)}(t)}function ue(t){var e;me.flush(),e=fe.getListByName(t).sortDeadlineAsc().items.map((t=>{let e=new Kt(t.title,t.priority.asNumber,t.deadline,t.note);return{hash:me.register(e),params:e,callbacks:{remove:de}}})),document.querySelectorAll(".item-card").forEach((t=>t.remove())),e.forEach((t=>ie(t.hash,t.params,t.callbacks)))}function le(){!function(t){let e=t.stringify();localStorage.setItem("TodoLister__ListOfLists",e)}(fe)}var he;he={listCreated:function(t){const e=oe(t);fe.add(e),ce(t),se(t)}},te("lists","new","mdi-playlist-plus",(()=>ne(he))),function(t){te("items","new","mdi-plus-box-multiple-outline",(()=>ee(t)))}({itemCreated:function(t){!function(t,e,n,r){const a=new Kt(t,e.asNumber,n,r);ie(me.register(a),a,{remove:de});let i=fe.getListByName(ae()),o=new Xt(a.title,a.priority,a.deadline,a.note);o.changedCb=le,i.add(o)}(t.title,t.priority,t.deadline,t.note)}});const me=new class{#d=[];constructor(){this.#d=[]}register(t){const e=function(t){var e,n=0;if(0===t.length)return n;for(e=0;e<t.length;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;return n}(Object.values(t).reduce(((t,e)=>t+String(e)),""));if(this.#d.includes(e))throw new Error("An exact copy of this item is already registered.");return this.#d.push(e),e}unregister(t){let e=this.#d.findIndex((e=>e===t));if(e<0)throw new Error(`${t} not found in registry.`);this.#d.splice(e,1)}flush(){this.#d=[]}findIdx(t){return this.#d.findIndex((e=>e===t))}get hashes(){return this.#d}};let fe;const we=function(t){const e=localStorage.getItem("TodoLister__ListOfLists");if(e){let n=null;try{n=Jt.parse(t,e)}catch(t){console.error(`While loading persisted model: ${t}`)}if(n)return n}return null}({changed:le});if(we)fe=we;else{const t=oe(jt);fe=new Jt([t]).sortAsc()}for(let t of fe.lists)ce(t.name,{deleteBtn:t.name!==jt});se(jt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,